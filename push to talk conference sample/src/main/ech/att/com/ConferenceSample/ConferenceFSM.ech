/**************************************************************
 *       Template machine for ECharts for SIP Servlets        *
 **************************************************************/

// $Name:  $ $Id: $

package att.com.ConferenceSample;

import java.util.Properties;
import javax.servlet.ServletContext;
import javax.servlet.sip.*;
import javax.servlet.sip.ar.*;
import org.echarts.*;
import org.echarts.servlet.sip.*;
import org.echarts.servlet.sip.messages.*;
import org.echarts.servlet.sip.machines.*;
import att.com.ConferenceSample.*;
import finals.*;
import messages.*;
import java.net.Socket;
import java.io.OutputStream;
import java.io.PrintWriter;
import javax.servlet.sip.*;

/**
 * Represents a Single Conference Room Machine
 */
 
public machine ConferenceFSM  {
<*
	FeatureBox     box;
	Properties     servletProps;
	ServletContext servletContext;

	/** Incoming Port from ConferenceSampleMachine **/
	private InternalPort internalPort = null;
	/** Incoming Port from Each of the OutLegsFSM **/
	private InternalPort confIncomingEventsPort;

	sipToJavaNotification sipToJavaNotify;
		
	BoxPort boxPort;
	/** Initated only if a new invite was recieved from the user**/
	SipPort caller;
	
	private int forkLegsCounter = 0;
	
	private String talkerIP = NO_CALLER_IP;
	private static final String NO_CALLER_IP = "0.0.0.0";
	
	private SipServletRequest initialInvite = null;
		
	private boolean sendCmdToMediaServer(OutLegMessage msg) {
		System.out.println("About to send to Media Replicator "+msg);
		PrintWriter printWriter = null;
		boolean success = false;
		try {
			  Socket socket = new Socket(MediaServerFinals.MEDIA_REPLICATOR_IP, MediaServerFinals.MEDIA_REPLICATOR_CONF_PORT);			  
		      OutputStream outputStream = socket.getOutputStream();
		      printWriter = new PrintWriter((outputStream));
		      printWriter.println(msg.generateCmd());
		      success = true;
		} catch(Exception e) {
		      System.out.println("Error Writing to " + MediaServerFinals.MEDIA_REPLICATOR_IP + e);
		} finally {
			if (printWriter != null) {
				 printWriter.flush();
				 printWriter.close(); 
			}
			return success;
		 }		
	}
	
	/**
	 * Handles Messages for the Media Replicator sent by the OutLegFSM
	 */
	private void handleConfIncomingMessage(OutLegMessage message) {
	
		switch(message.getMsCommnad()) {
			case PTTON: 
			if (talkerIP.equals(NO_CALLER_IP))
			{
				sipToJavaNotify.pttON(message.getUsername());
				sendCmdToMediaServer(message);
				talkerIP = message.getIp();
			}
			break;
			case PTTOFF:
			if (talkerIP.equals(message.getIp()))
			{
			    sipToJavaNotify.pttOFF(message.getUsername());
			    sendCmdToMediaServer(message);
			    talkerIP = NO_CALLER_IP;
			}
			break;
			case ADD:
			    sipToJavaNotify.addUser(message.getUsername());
			    sendCmdToMediaServer(message);
				break;
				case REMOVE:
				 if (talkerIP.equals(message.getIp()))
			{
			    sipToJavaNotify.pttOFF(message.getUsername());
			    sendCmdToMediaServer(message.cloneMsg(MediaServerCommand.PTTOFF));
			    talkerIP = NO_CALLER_IP;
			}
			sipToJavaNotify.removeUser(message.getUsername());
			sendCmdToMediaServer(message);
				break;
			case ILLEGAL:
				System.out.println("ERROR " + message);	    			    	
				break;	    		
			default:
				System.out.println("Sending to media Server " + message);    				
				sendCmdToMediaServer(message);
		}
	}
*>

	public ConferenceFSM(FeatureBox box, Properties servletProps, ServletContext servletContext,InternalPort extPort, SipServletRequest initInvite, sipToJavaNotification sipToJavaNotify) { <*
		this.box            = box;
		this.servletProps   = servletProps;
		this.servletContext = servletContext;		
		this.internalPort = extPort;
		this.sipToJavaNotify = sipToJavaNotify;
		this.confIncomingEventsPort = new InternalPort(this,"outLegsIncoming"); 
		boxPort = box.getBoxPort();
		this.initialInvite = initInvite;
	
	*> }
	
	initial state INIT;
	
	state  READY: {

		concurrent state WAIT;
        concurrent state PLACE_CALL: {
              initial state IDLE;
              state  START;     
        }
		
		concurrent state PARALLEL[16] : OutLegFSM(box, caller, initialInvite, confIncomingEventsPort);
		
        transition WAIT - internalPort ? Invite /
    		<*
    			initialInvite = message;        		
    		*>    		
    	->PLACE_CALL.START;
        
        transition PLACE_CALL.START -/{
        	<*        	
        	putEvent(new DebugEvent("New Caller"));
			caller = box.createSipPort("caller" + (++forkLegsCounter));
			*>              
        }->[PLACE_CALL.IDLE,PARALLEL.NEW];
        
        transition WAIT - confIncomingEventsPort ? OutLegMessage / {
    		<*
    		putEvent(new DebugEvent("Got Out Leg Message " + message));
    		handleConfIncomingMessage(message);    		    
    		*>     	
        } -> WAIT
	}
	
	transition INIT - [ internalPort != null] -> READY.PLACE_CALL.START;
}

