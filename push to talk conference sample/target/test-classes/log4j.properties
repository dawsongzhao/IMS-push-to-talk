# Set root logger level to INFO and set two appenders - CONSOLE and LOGFILE.
log4j.rootLogger=INFO, CONSOLE, LOGFILE

#Useful to tester 
#Turns on test case level logging as well as
#automatic informative logging from KitCAT.
#From a test case, use getLogger() to get this logger object. 
#INFO level 
# - Apart from user-specified INFO log messages in a test case, 
#   this turns on logging of helpful messages about agent functions
#   e.g bob.call(alice) automatically logs a
#       message like "Bob calls alice"
#DEBUG level 
# - Apart from user-specified debug messages 
#   in the test case, KitCAT framework debug messages are included.
log4j.logger.KitCAT.Tester=INFO

#Useful to tester 
#Turns on SIP stack logging
#INFO level - SIP messages are logged
#DEBUG level (for KitCAT debugging) - debug messages in the SIP stack are logged 
log4j.logger.KitCAT.SipStack=INFO

#To be used for KitCAT EChartsForJainSip layer debugging
#usually not used by tester
log4j.logger.KitCAT.E4JS=WARN

#To be used for KitCAT agent machine debugging
#usually not used by tester
log4j.logger.KitCAT.ECharts=WARN

# CONSOLE is set to be a ConsoleAppender using a PatternLayout.
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Threshold=ALL
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

# LOGFILE is set to be a File appender using a PatternLayout.
log4j.appender.LOGFILE=org.echarts.jain.sip.FileAppender
log4j.appender.LOGFILE.File=target/logs/run.log
log4j.appender.LOGFILE.Append=false
log4j.appender.LOGFILE.Threshold=ALL
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

