//
// This file was generated by ech2java. Do not modify.
//

// ECharts source top line tag: 7
package att.com.ConferenceSample;
// ECharts source bottom line tag: 7

import org.echarts.*;
import org.echarts.monitor.*;
// ECharts source top line tag: 9
import  java.util.*;
// ECharts source bottom line tag: 9
// ECharts source top line tag: 10
import  javax.servlet.ServletContext;
// ECharts source bottom line tag: 10
// ECharts source top line tag: 11
import  javax.servlet.sip.*;
// ECharts source bottom line tag: 11
// ECharts source top line tag: 12
import  javax.servlet.sip.ar.*;
// ECharts source bottom line tag: 12
// ECharts source top line tag: 13
import  java.util.ArrayList;
// ECharts source bottom line tag: 13
// ECharts source top line tag: 14
import  java.util.Iterator;
// ECharts source bottom line tag: 14
// ECharts source top line tag: 15
import  javax.sdp.*;
// ECharts source bottom line tag: 15
// ECharts source top line tag: 16
import  org.echarts.servlet.sip.utilities.SdpUtils;
// ECharts source bottom line tag: 16
// ECharts source top line tag: 17
import  org.echarts.servlet.sip.*;
// ECharts source bottom line tag: 17
// ECharts source top line tag: 18
import  java.net.Socket;
// ECharts source bottom line tag: 18
// ECharts source top line tag: 19
import  java.io.OutputStream;
// ECharts source bottom line tag: 19
// ECharts source top line tag: 20
import  java.io.PrintWriter;
// ECharts source bottom line tag: 20
// ECharts source top line tag: 21
import  org.echarts.servlet.sip.messages.Info;
// ECharts source bottom line tag: 21
// ECharts source top line tag: 22
import  org.echarts.servlet.sip.messages.*;
// ECharts source bottom line tag: 22
// ECharts source top line tag: 23
import  org.echarts.servlet.sip.machines.*;
// ECharts source bottom line tag: 23
// ECharts source top line tag: 24
import  org.echarts.servlet.sip.utilities.*;
// ECharts source bottom line tag: 24
// ECharts source top line tag: 25
import  finals.*;
// ECharts source bottom line tag: 25
// ECharts source top line tag: 26
import  messages.*;
// ECharts source bottom line tag: 26
// ECharts source top line tag: 27
import  att.com.ConferenceSample.*;
// ECharts source bottom line tag: 27

/** 
 * Represnets a Participent in a conference room
 */
public class OutLegFSM extends TransitionMachine {
// Static declarations for OutLegFSM
private static final int OutLegFSM_NUM_STATES = 3;
private static State[] OutLegFSM_states = new State[OutLegFSM_NUM_STATES];
private static void initialize_OutLegFSM_states_0() {
OutLegFSM_states[0] = new OrState("INIT", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
OutLegFSM_states[1] = new OrState("CALL", new MachineConstructor() { public Machine newInstance(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception { return ((OutLegFSM) parentMachine).state_CALL(parentMachine, machineIndex, machineCode); }}, null, null, false);
OutLegFSM_states[2] = new OrState("END", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
}
static {
    initialize_OutLegFSM_states_0();
}
private static MachineMessageTransitions[] OutLegFSM_messageTransitions = initializeMessageTransitions(new MachineMessageTransitions[OutLegFSM_NUM_STATES]);
private static MachineMessagelessTransitions[] OutLegFSM_messagelessTransitions = initializeMessagelessTransitions(new MachineMessagelessTransitions[OutLegFSM_NUM_STATES]);
private static void initialize_OutLegFSM_transitions_0() {
addMessagelessTransition(OutLegFSM_messagelessTransitions, new MessagelessTransition(new TransitionSource(new MultiStateConfiguration(0, new StateConfiguration[]{Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {0, -1, -1}, null), "[INIT]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(0, new StateConfiguration[]{Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {0, -1, -1, -1, -1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_1_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_1_1_tgt_machine_binding(cfgIndex); }}), "[CALL.SEND_INVITE_RESPONSE]", new MessagelessGuardMethod() { public boolean invoke(final Machine machine) throws Exception { return ((OutLegFSM) machine).transition_1_1_guard(); }}, new MessagelessActionMethod() { public void invoke(final Machine machine) throws Exception { ((OutLegFSM) machine).transition_1_1_action(); }}), new BasicTransitionTarget(new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, -1, 0}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_1_2_tgt_machine_binding(cfgIndex); }}), "[END]", null, new MessagelessActionMethod() { public void invoke(final Machine machine) throws Exception { ((OutLegFSM) machine).transition_1_2_action(); }})})), 0);
addMessagelessTransition(OutLegFSM_messagelessTransitions, new MessagelessTransition(new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(0, new StateConfiguration[]{Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {0, -1, -1, -1, -1, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.SEND_INVITE_RESPONSE]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(3, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, 0, -1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_2_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_2_1_tgt_machine_binding(cfgIndex); }}), "[CALL.SUCCESS_CONTINUE]", new MessagelessGuardMethod() { public boolean invoke(final Machine machine) throws Exception { return ((OutLegFSM) machine).transition_2_1_guard(); }}, new MessagelessActionMethod() { public void invoke(final Machine machine) throws Exception { ((OutLegFSM) machine).transition_2_1_action(); }}), new BasicTransitionTarget(new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, -1, 0}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_2_2_tgt_machine_binding(cfgIndex); }}), "[END]", null, new MessagelessActionMethod() { public void invoke(final Machine machine) throws Exception { ((OutLegFSM) machine).transition_2_2_action(); }})})), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_3_port(); }}, ProvisionalResponse.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, 0, -1, -1, -1, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.WAIT_FOR_RESP]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, 0, -1, -1, -1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_3_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_3_1_tgt_machine_binding(cfgIndex); }}), "[CALL.WAIT_FOR_RESP]", null, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_3_1_action(port, (ProvisionalResponse) message); }})}), true), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_4_port(); }}, Request.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, 0, -1, -1, -1, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.WAIT_FOR_RESP]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, 0, -1, -1, -1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_4_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_4_1_tgt_machine_binding(cfgIndex); }}), "[CALL.WAIT_FOR_RESP]", null, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_4_1_action(port, (Request) message); }})}), true), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_5_port(); }}, FinalResponse.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, 0, -1, -1, -1, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.WAIT_FOR_RESP]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, -1, 0}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_5_1_tgt_machine_binding(cfgIndex); }}), "[END]", null, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_5_1_action(port, (FinalResponse) message); }})}), true), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_6_port(); }}, SuccessResponse.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, 0, -1, -1, -1, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.WAIT_FOR_RESP]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, 0, -1, -1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_6_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_6_1_tgt_machine_binding(cfgIndex); }}), "[CALL.SUCCESS]", null, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_6_1_action(port, (SuccessResponse) message); }})}), true), 1);
addMessagelessTransition(OutLegFSM_messagelessTransitions, new MessagelessTransition(new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, 0, -1, -1, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.SUCCESS]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(3, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, 0, -1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_7_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_7_1_tgt_machine_binding(cfgIndex); }}), "[CALL.SUCCESS_CONTINUE]", null, new MessagelessActionMethod() { public void invoke(final Machine machine) throws Exception { ((OutLegFSM) machine).transition_7_1_action(); }})})), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_8_port(); }}, Ack.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(3, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, 0, -1, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.SUCCESS_CONTINUE]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(4, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, -1, 0, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_8_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_8_1_tgt_machine_binding(cfgIndex); }}), "[CALL.CONNECTED]", null, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_8_1_action(port, (Ack) message); }})}), true), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_9_port(); }}, Info.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(4, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, -1, 0, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.CONNECTED]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(4, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, -1, 0, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_9_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_9_1_tgt_machine_binding(cfgIndex); }}), "[CALL.CONNECTED]", new MessageGuardMethod() { public boolean invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { return ((OutLegFSM) machine).transition_9_1_guard(port, (Info) message); }}, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_9_1_action(port, (Info) message); }})}), true), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_10_port(); }}, Request.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(4, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, -1, 0, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.CONNECTED]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(4, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, -1, 0, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_10_1_tgt_machine_binding(cfgIndex); }}), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_10_1_tgt_machine_binding(cfgIndex); }}), "[CALL.CONNECTED]", null, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_10_1_action(port, (Request) message); }})}), true), 1);
addMessageTransition(OutLegFSM_messageTransitions, new MessageTransition(new PortMethod() { public LocalPort invoke(final Machine machine) { return ((OutLegFSM) machine).transition_11_port(); }}, Bye.class, new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(4, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, -1, 0, -1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 1, -1}, null), "[CALL.CONNECTED]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, -1, 0}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_11_1_tgt_machine_binding(cfgIndex); }}), "[END]", null, new MessageActionMethod() { public void invoke(final Machine machine, final LocalPort port, final Object message) throws Exception { ((OutLegFSM) machine).transition_11_1_action(port, (Bye) message); }})}), true), 1);
addMessagelessTransition(OutLegFSM_messagelessTransitions, new MessagelessTransition(new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, new MultiStateConfiguration(-1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.TERMINAL_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, -1, 0}, null)}, new boolean[] {false, false, false, false, false, false}, new int[] {-1, -1, -1, -1, -1, 1}, null), Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 2, -1}, null), "[CALL.TEARDOWN_EVENT.TD.TERMINAL]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, -1, 0}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM) machine).get_transition_12_1_tgt_machine_binding(cfgIndex); }}), "[END]", null, new MessagelessActionMethod() { public void invoke(final Machine machine) throws Exception { ((OutLegFSM) machine).transition_12_1_action(); }})})), 1);
}
static {
    initialize_OutLegFSM_transitions_0();
}
// Static declarations for OutLegFSM.CALL
private static final int CALL_NUM_STATES = 6;
private static State[] CALL_states = new State[CALL_NUM_STATES];
private static void initialize_CALL_states_0() {
CALL_states[0] = new OrState("SEND_INVITE_RESPONSE", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
CALL_states[1] = new OrState("WAIT_FOR_RESP", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
CALL_states[2] = new OrState("SUCCESS", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
CALL_states[3] = new OrState("SUCCESS_CONTINUE", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
CALL_states[4] = new OrState("CONNECTED", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
CALL_states[5] = new AndState("TEARDOWN_EVENT", new MachineConstructor() { public Machine newInstance(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception { return ((OutLegFSM.CALL) parentMachine).state_TEARDOWN_EVENT(parentMachine, machineIndex, machineCode); }}, null, null, false);
}
static {
    initialize_CALL_states_0();
}
private static MachineMessageTransitions[] CALL_messageTransitions = initializeMessageTransitions(new MachineMessageTransitions[CALL_NUM_STATES]);
private static MachineMessagelessTransitions[] CALL_messagelessTransitions = initializeMessagelessTransitions(new MachineMessagelessTransitions[CALL_NUM_STATES]);
// Static declarations for OutLegFSM.CALL.TEARDOWN_EVENT
private static final int TEARDOWN_EVENT_NUM_STATES = 3;
private static State[] TEARDOWN_EVENT_states = new State[TEARDOWN_EVENT_NUM_STATES];
private static void initialize_TEARDOWN_EVENT_states_0() {
TEARDOWN_EVENT_states[0] = new OrState("IDLE", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
TEARDOWN_EVENT_states[1] = new OrState("START", BasicMachineConstructor.BASIC_MACHINE_CONSTRUCTOR, null, null, false);
TEARDOWN_EVENT_states[2] = new OrState("TD", new MachineConstructor() { public Machine newInstance(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception { return ((OutLegFSM.CALL.TEARDOWN_EVENT) parentMachine).state_TD(parentMachine, machineIndex, machineCode); }}, null, null, false);
}
static {
    initialize_TEARDOWN_EVENT_states_0();
}
private static MachineMessageTransitions[] TEARDOWN_EVENT_messageTransitions = initializeMessageTransitions(new MachineMessageTransitions[TEARDOWN_EVENT_NUM_STATES]);
private static MachineMessagelessTransitions[] TEARDOWN_EVENT_messagelessTransitions = initializeMessagelessTransitions(new MachineMessagelessTransitions[TEARDOWN_EVENT_NUM_STATES]);
private static void initialize_TEARDOWN_EVENT_transitions_0() {
addMessagelessTransition(TEARDOWN_EVENT_messagelessTransitions, new MessagelessTransition(new TransitionSource(new MultiStateConfiguration(1, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG, Machine.VARIABLE_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, 0, -1}, null), "[START]"), new CompoundTransitionTarget(null, new TransitionTarget[]{new BasicTransitionTarget(new MultiStateConfiguration(2, new StateConfiguration[]{Machine.VARIABLE_CONFIG, Machine.VARIABLE_CONFIG, Machine.BASIC_CONFIG}, new boolean[] {false, false, false}, new int[] {-1, -1, 0}, new SubmachineBindingGettor() { public final Machine getSubmachine(final int cfgIndex, final Machine machine) throws Exception { return ((OutLegFSM.CALL.TEARDOWN_EVENT) machine).get_transition_1_1_tgt_machine_binding(cfgIndex); }}), "[TD]", null, new MessagelessActionMethod() { public void invoke(final Machine machine) throws Exception { ((OutLegFSM.CALL.TEARDOWN_EVENT) machine).transition_1_1_action(); }})})), 1);
}
static {
    initialize_TEARDOWN_EVENT_transitions_0();
}
// Declarations for OutLegFSM
// ECharts source top line tag: 168
public OutLegFSM(FeatureBox box, SipPort aCallee, SipServletRequest aInvite, InternalPort controlPort, final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception {
super(OutLegFSM_states, OutLegFSM_messageTransitions, OutLegFSM_messagelessTransitions, OutLegFSM.class.getName(), parentMachine, machineIndex, machineCode);
try{
			this.box            = box;
			this.callee			= aCallee;
			this.initialInvite	= aInvite;			
		
			
			putEvent(new DebugEvent("init machine"));
			isMachineReady = true;	
			this.controlPort = controlPort;
			
		}catch(Exception e){
			 putEvent(new DebugEvent("Exception during Initialization" + e));
		};
}

public OutLegFSM(FeatureBox box, SipPort aCallee, SipServletRequest aInvite, InternalPort controlPort) throws Exception {
this(box, aCallee, aInvite, controlPort, null, -1, null);
}
// ECharts source bottom line tag: 168

// ECharts source top line tag: 33

	FeatureBox     box;
	Properties     servletProps;
	ServletContext servletContext;

	SipPort callee;
	
	private SipServletRequest initialInvite;	
	private boolean isMachineReady = false;			
	
	/** Saved when recieving an Invite**/
	private int audioRtpPort = -1;
	private String audioRtpIp = null;
	private String username = null;

	private static final String DTMF_MSG_TYPE = "application/dtmf-relay";
	private static final String DTMF_SIGNAL_STR = "Signal=";
	private static final String INVITE_REC_ORIGIN_FIELD_ADDENDA = " IP4";
	
	/** A Port to send messages to the Conference Machine**/
	private InternalPort controlPort;
	
	private boolean isDtmfMsg(Info dtmfMsg) {
		System.out.println("Got Sip info of type " +dtmfMsg.getContentType());
		return dtmfMsg != null && DTMF_MSG_TYPE.equals(dtmfMsg.getContentType());
	}
	
	private OutLegMessage createOutLegMsg(Info dtmfMsg) {
		System.out.println("Generate a OutLegMessage");
		OutLegMessage retVal;
			try {
			  String  charset = "UTF-8"; // RFC 3261
		      //Save the SDP content in a String
			  
		      byte[] rawContent = dtmfMsg.getRawContent();
		      putEvent(new DebugEvent("AConference chekc PTT ON:" + rawContent));
		      String myContent = new String(rawContent, charset);
		      char dtmf_char = myContent.charAt(myContent.indexOf(DTMF_SIGNAL_STR) + DTMF_SIGNAL_STR.length() );
		      switch (dtmf_char) {
			  case '1': 
				  retVal =  new OutLegMessage(audioRtpIp, audioRtpPort,username ,MediaServerCommand.PTTON);
		    	  break;
		      case '2':
		    	  retVal =  new OutLegMessage(audioRtpIp, audioRtpPort, username, MediaServerCommand.PTTOFF);
		    	  break;
		      default:
		    	  retVal =  new OutLegMessage(audioRtpIp, audioRtpPort, username, MediaServerCommand.ILLEGAL);		    	  
		      }		      
			} catch (Exception e) {
				System.out.println("Error Check PTT Incoming " + dtmfMsg+ " Exception" + e);
				retVal =  new OutLegMessage(audioRtpIp, audioRtpPort, username, MediaServerCommand.ILLEGAL);
			}
		return retVal;
	}

	private MediaServerCommand dtmfCommandType(Info dtmfMsg) {
		System.out.println("Generate a OutLegMessage");
		MediaServerCommand retVal;
			try {
			  String  charset = "UTF-8"; // RFC 3261
		      //Save the SDP content in a String			  
		      byte[] rawContent = dtmfMsg.getRawContent();
		      putEvent(new DebugEvent("AConference chekc PTT ON:" + rawContent));
		      String myContent = new String(rawContent, charset);
		      char dtmf_char = myContent.charAt(myContent.indexOf(DTMF_SIGNAL_STR) + DTMF_SIGNAL_STR.length() );		      
		      switch (dtmf_char) {
		      case '1': 
		    	  retVal = MediaServerCommand.PTTON;
		    	  break;
		      case '2':
		    	  retVal = MediaServerCommand.PTTOFF;
		    	  break;
		      default:
		    	  retVal = MediaServerCommand.ILLEGAL;		    	  	
		      }
			} catch (Exception e) {
				System.out.println("Error Check PTT Incoming " + dtmfMsg+ " Exception" + e);
				retVal =  MediaServerCommand.ILLEGAL;
			}					
		return retVal;
	}
	
	private boolean bindInvite() {
		boolean retVal = false;
		try {
			callee.bind(initialInvite);
			retVal = true;
		} catch (Exception e) {
			System.out.println("Failed to bind invite to port " + initialInvite);			
		}
		return retVal;
	}
	
	private SipServletResponse createResponse() {
		  try {			  
	   		  String  charset = "UTF-8"; // RFC 3261
		      //Save the SDP content in a String
		      byte[] rawContent = initialInvite.getRawContent();
		      putEvent(new DebugEvent("going to send invite:" + rawContent));
		      String myContent = new String(rawContent, charset);
			  SdpFactory sdpf = SdpFactory.getInstance();
			  
			  SessionDescription sdp = sdpf.createSessionDescription(myContent );
			  Origin origin = sdp.getOrigin();
			  audioRtpIp = origin.getAddress();
			  
			  origin.setAddress(MediaServerFinals.MEDIA_REPLICATOR_IP+INVITE_REC_ORIGIN_FIELD_ADDENDA);
			  Vector<MediaDescription> mds = sdp.getMediaDescriptions(false);
			  
              Connection con = sdp.getConnection();
              con.setAddress(MediaServerFinals.MEDIA_REPLICATOR_IP);
			 
			 // TODO handle single Audio stream
			 for(MediaDescription md:mds) {
				  if ("audio".equals(md.getMedia().getMediaType())){
					  System.out.println("Media Of type" + md.getMedia());
					  audioRtpPort = md.getMedia().getMediaPort();
					  md.getMedia().setMediaPort(MediaServerFinals.MEDIA_REPLICATOR_RTP_PORT);
				  }
			 }		  

			SipURI sipuri= (SipURI) initialInvite.getFrom().getURI();
			username = sipuri.getUser();
			System.out.println("Fetch username " + username);
			
			SipServletResponse resp = initialInvite.createResponse(SipServletResponse.SC_OK);
			resp.setContent(sdp.toString().getBytes(),initialInvite.getContentType());
			
			return resp;
		  }catch (Exception e) {
			 System.out.println("Failed to create OK response for Invite " + initialInvite + " " +e);
			 return null;
		  }
	}
;
// ECharts source bottom line tag: 33
// ECharts source top line tag: 186
 CALL CALL = null;
public Machine state_CALL(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception {
CALL = new CALL(parentMachine, machineIndex, machineCode);
return CALL;
}
// ECharts source bottom line tag: 186
final protected void clearSubmachineReference(final int index) {
switch(index) {
case 1: CALL = null; break;
default: break;
}
}
// ECharts source top line tag: 205

final private Machine get_transition_1_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public boolean transition_1_1_guard() throws Exception {
return isMachineReady;
}
public void transition_1_1_action() throws Exception {
}

final private Machine get_transition_1_2_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_1_2_action() throws Exception {
putEvent(new DebugEvent("OutLegFSM endded (initialization)."));
}
// ECharts source bottom line tag: 205
// ECharts source top line tag: 211

final private Machine get_transition_2_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public boolean transition_2_1_guard() throws Exception {
return (true) == (bindInvite());
}
public void transition_2_1_action() throws Exception {
((OutputPort) callee).output(createResponse(), this);
}

final private Machine get_transition_2_2_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_2_2_action() throws Exception {
putEvent(new DebugEvent("OutLegFSM endded (send invite failure)."));
}
// ECharts source bottom line tag: 211
// ECharts source top line tag: 218
public LocalPort transition_3_port() {
return callee;
}

final private Machine get_transition_3_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_3_1_action(final LocalPort port, final ProvisionalResponse message) throws Exception {
;
}
// ECharts source bottom line tag: 218
// ECharts source top line tag: 221
public LocalPort transition_4_port() {
return callee;
}

final private Machine get_transition_4_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_4_1_action(final LocalPort port, final Request message) throws Exception {
putEvent(new DebugEvent(("OutLegFSM ignores unsupported request") + (message.getMethod())));
((OutputPort) callee).output(callee.createResponse(405, message), this);
;
}
// ECharts source bottom line tag: 221
// ECharts source top line tag: 226
public LocalPort transition_5_port() {
return callee;
}

final private Machine get_transition_5_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_5_1_action(final LocalPort port, final FinalResponse message) throws Exception {
putEvent(new DebugEvent(("OutLegFSM endded (reject from callee). ") + (message.getStatus())));
;
}
// ECharts source bottom line tag: 226
// ECharts source top line tag: 230
public LocalPort transition_6_port() {
return callee;
}

final private Machine get_transition_6_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_6_1_action(final LocalPort port, final SuccessResponse message) throws Exception {
putEvent(new DebugEvent("Got Success Responsee"));
;
}
// ECharts source bottom line tag: 230
// ECharts source top line tag: 234

final private Machine get_transition_7_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_7_1_action() throws Exception {
putEvent(new DebugEvent("WARNING!!!!! parend suppose to override this transition!!!"));
}
// ECharts source bottom line tag: 234
// ECharts source top line tag: 238
public LocalPort transition_8_port() {
return callee;
}

final private Machine get_transition_8_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_8_1_action(final LocalPort port, final Ack message) throws Exception {
OutLegMessage msg = new OutLegMessage(audioRtpIp, audioRtpPort, username, MediaServerCommand.ADD);
			controlPort.output(msg,this);;
;
}
// ECharts source bottom line tag: 238
// ECharts source top line tag: 245
public LocalPort transition_9_port() {
return callee;
}

final private Machine get_transition_9_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public boolean transition_9_1_guard(final LocalPort port, final Info message) throws Exception {
return (isDtmfMsg(message)) == (true);
}
public void transition_9_1_action(final LocalPort port, final Info message) throws Exception {
if (MediaServerCommand.ILLEGAL != dtmfCommandType(message))
			 {
			   OutLegMessage outLegMsg = createOutLegMsg(message);
			   controlPort.output(outLegMsg,this);		
			 };
((OutputPort) callee).output(callee.createResponse(SipServletResponse.SC_OK, message), this);
;
}
// ECharts source bottom line tag: 245
// ECharts source top line tag: 256
public LocalPort transition_10_port() {
return callee;
}

final private Machine get_transition_10_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_10_1_action(final LocalPort port, final Request message) throws Exception {
putEvent(new DebugEvent(("OutLegFSM.CONNECTED ignores unsupported request") + (message.getMethod())));
((OutputPort) callee).output(callee.createResponse(SipServletResponse.SC_METHOD_NOT_ALLOWED, message), this);
;
}
// ECharts source bottom line tag: 256
// ECharts source top line tag: 261
public LocalPort transition_11_port() {
return callee;
}

final private Machine get_transition_11_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_11_1_action(final LocalPort port, final Bye message) throws Exception {
putEvent(new DebugEvent("OutLegFSM endded (BYE from callee)."));
OutLegMessage msg = new OutLegMessage(audioRtpIp, audioRtpPort, username, MediaServerCommand.REMOVE);
			controlPort.output(msg,this);;
((OutputPort) callee).output(callee.createResponse(SipServletResponse.SC_OK, message), this);
;
}
// ECharts source bottom line tag: 261
// ECharts source top line tag: 270

final private Machine get_transition_12_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_12_1_action() throws Exception {
putEvent(new DebugEvent("OutLegFSM endded (TEARDOWN by Parent)."));
}
// ECharts source bottom line tag: 270
// Declarations for OutLegFSM.CALL
public class CALL extends TransitionMachine {
public CALL(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception {
super(CALL_states, CALL_messageTransitions, CALL_messagelessTransitions, OutLegFSM.CALL.class.getName(), parentMachine, machineIndex, machineCode);
}
// ECharts source top line tag: 193
 TEARDOWN_EVENT TEARDOWN_EVENT = null;
public Machine state_TEARDOWN_EVENT(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception {
TEARDOWN_EVENT = new TEARDOWN_EVENT(parentMachine, machineIndex, machineCode);
return TEARDOWN_EVENT;
}
// ECharts source bottom line tag: 193
final protected void clearSubmachineReference(final int index) {
switch(index) {
case 5: TEARDOWN_EVENT = null; break;
default: break;
}
}
// Declarations for OutLegFSM.CALL.TEARDOWN_EVENT
public class TEARDOWN_EVENT extends TransitionMachine {
public TEARDOWN_EVENT(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception {
super(TEARDOWN_EVENT_states, TEARDOWN_EVENT_messageTransitions, TEARDOWN_EVENT_messagelessTransitions, OutLegFSM.CALL.TEARDOWN_EVENT.class.getName(), parentMachine, machineIndex, machineCode);
}
// ECharts source top line tag: 196
 SipPortTeardownFSM TD = null;
public Machine state_TD(final Machine parentMachine, final int machineIndex, final MachineCode machineCode) throws Exception {
TD = new SipPortTeardownFSM(callee, true, parentMachine, machineIndex, machineCode);
return TD;
}
// ECharts source bottom line tag: 196
final protected void clearSubmachineReference(final int index) {
switch(index) {
case 2: TD = null; break;
default: break;
}
}
// ECharts source top line tag: 198

final private Machine get_transition_1_1_tgt_machine_binding(final int cfgIndex) throws Exception {
	switch (cfgIndex) {

    default:
        throw new MachineException("No subconfiguration machine binding defined for subconfiguration index " + cfgIndex);
	}
}
public void transition_1_1_action() throws Exception {
putEvent(new DebugEvent((" PortState=") + (callee.getPortState())));
}
// ECharts source bottom line tag: 198
}
}
}
