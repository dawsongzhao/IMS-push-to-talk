/***********************************************************************
*                                                                      *
*               This software is part of the ECharts package           *
*                  Copyright (c) 2006-2009 AT&T Corp.                  *
*                      and is licensed under the                       *
*                  Common Public License, Version 1.0                  *
*                            by AT&T Corp.                             *
*                                                                      *
***********************************************************************/

// $Name:  $ $Id: ConnectNewFSM.ech,v 1.3 2008/04/18 14:32:46 tsmith Exp $;

package org.echarts.servlet.sip.machines;

import javax.servlet.sip.*;
import org.echarts.servlet.sip.*;
import org.echarts.servlet.sip.messages.*;
import org.echarts.servlet.sip.machines.*;

/** Sets up call between a connected port and a new port.
 *
 * <ol>
 * <li>Places call to newCall (using newInvite)</li>
 * <li>Upon success response from newCall, sends re-INVITE to connected</li>
 * </ol>
 */

public machine ConnectNewFSM  {
<*
	SipPort connected;
	SipPort newCall;

	SipServletRequest newInvite;
		
	private final static String SESSION_PROGRESS_RESPONSE = "SESSION_PROGRESS_RESPONSE";
	private final static String SUCCESS_RESPONSE = "SUCCESS_RESPONSE";
	private final static String FAILURE_RESPONSE = "FAILURE_RESPONSE";
	
	private void setSessionProgressResponse(ProvisionalResponse183 r) {
		newCall.setAttribute(SESSION_PROGRESS_RESPONSE, r);
	}
	
	public ProvisionalResponse183 getSessionProgressResponse() {
		return (ProvisionalResponse183) newCall.getAttribute(SESSION_PROGRESS_RESPONSE);
	}
	
	private void setSuccessResponse(SuccessResponse r) {
		newCall.setAttribute(SUCCESS_RESPONSE, r);
	}
	
	public SuccessResponse getSuccessResponse() {
		return (SuccessResponse) newCall.getAttribute(SUCCESS_RESPONSE);
	}

	private void setFailureResponse(FinalResponse r) {
		newCall.setAttribute(FAILURE_RESPONSE, r);
	}
	
	public FinalResponse getFailureResponse() {
		return (FinalResponse) newCall.getAttribute(FAILURE_RESPONSE);
	}
	
*>

	public ConnectNewFSM(SipPort connected, SipPort newCall) {
		this.connected  = connected;
		this.newCall = newCall;

		newInvite = newCall.getInitialRequest();
	}

	public initial state PLACE_NEW_CALL : {
		public initial state INIT;
		public state WAIT_RESPONSE;
		public state CONNECTED_REINVITE : SendReinviteFSM(connected, getSessionProgressResponse());
		public state CONNECTED;
		public state FAILURE;

		transition INIT - / 
			newCall!newInvite
		-> WAIT_RESPONSE;

		// 183 => re-INVITE connected
		//
		transition WAIT_RESPONSE - newCall?ProvisionalResponse183 /
			setSessionProgressResponse(message);
		-> CONNECTED_REINVITE;

		// absorb all provisional responses except 183
		//
		transition WAIT_RESPONSE - newCall?ProvisionalResponse 
		-> WAIT_RESPONSE;

		transition CONNECTED_REINVITE.SUCCESS --> WAIT_RESPONSE;

		// TODO : CONNECTED_REINVITE.FAILURE --> ...
		// TODO : CONNECTED_REINVITE - connected ? Bye ...

		transition WAIT_RESPONSE - newCall?SuccessResponse / {
			setSuccessResponse(message);
			newCall!message.createAck();
		} -> CONNECTED;

		// handle error response from newCall
		transition WAIT_RESPONSE - newCall?FinalResponse /
			setFailureResponse(message);
		-> FAILURE;
	};

	// TODO : don't need to do this if done above
	public state CONNECTED_REINVITE : SendReinviteFSM(connected, getSuccessResponse());
	
	public state SUCCESS;

	public state FAILURE;

	transition PLACE_NEW_CALL.CONNECTED --> CONNECTED_REINVITE;

	// have to watch for this explicitly because otherwise messages on connected would be queued
	//
	transition PLACE_NEW_CALL - connected?Object -> FAILURE;

	transition CONNECTED_REINVITE.SUCCESS --> SUCCESS;

	transition CONNECTED_REINVITE.FAILURE --> FAILURE;

	transition PLACE_NEW_CALL.FAILURE --> FAILURE;
}
