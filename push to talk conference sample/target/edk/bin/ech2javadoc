#!/usr/bin/env python

########################################################################
#                                                                      #
#               This software is part of the ECharts package           #
#                  Copyright (c) 2006 AT&T Corp.                       #
#                      and is licensed under the                       #
#                  Common Public License, Version 1.0                  #
#                            by AT&T Corp.                             #
#                                                                      #
########################################################################

import sys, os
import ech2x

# Prepares Java source packages containing Java files translated from
# ECharts for subsequent processing with javadoc.

def main():
	# add command line args to tailor docmachine output for use by javadoc
	sys.argv = [ sys.argv[0] ] + \
			   ["--svg-only", "--package-subdirectory", "doc-files", "--no-dependencies"] + \
			   sys.argv[1:]
	ech2xargs = ['ech2javadoc', 'svg', 'docmachine', ["dot-path=", "svg-only"],
"""
Prepares Java source packages containing Java files translated from
ECharts .ech files for subsequent processing with javadoc. Note that
this program does not invoke javadoc. The user is responsible for
running javadoc separately. Also note that Graphviz 'dot' must be
installed to run this command. This program creates HTML and SVG files
for Java files translated from ECharts .ech files. Generated files are
placed in 'doc-files' subdirectory of associated Java source package
directories. Prior to running javadoc, the user should translate
ECharts machines to Java using ech2java. After running javadoc the
user should run javadocpp in order to customize documentation to use
files generated by this program.
""",
"""
--dot-path               'dot' program file path
""",
["package-subdirectory", "no-dependencies"]]
	# ensure that 'dot' executable exists
	apply(ech2x.processCommandLine, ech2xargs)
	if sys.platform == "win32":
		dotpath = ech2x.getWin32CommandPath("dot")
	else:
		dotpath = "dot"
	for arg, val in ech2x.opts:
		if arg == "--dot-path":
			dotpath = val
			break
	try:
		retval = os.spawnl(os.P_WAIT, dotpath, "-V")
	except Exception, message:
		retval = -1
	if retval < 0:
		sys.stderr.write("ech2javadoc: unable to execute 'dot -V'. Graphviz 'dot' must be installed to run ech2javadoc.\n")
		sys.exit(1)
	# generate doc-files directories and their contents
	apply(ech2x.main, ech2xargs)

main()
